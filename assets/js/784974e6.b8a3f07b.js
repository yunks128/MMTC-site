"use strict";(self.webpackChunkslim_docsite_template=self.webpackChunkslim_docsite_template||[]).push([[1251],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var r=t(6540);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},9748:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var r=t(4848),a=t(8453);const i={sidebar_position:3,id:"api",title:"MMTC Application Programming Interface (API)",sidebar_label:"API Reference"},o="MMTC API Reference",l={id:"developer/api",title:"MMTC Application Programming Interface (API)",description:"This document provides detailed information about the MMTC (Multi-Mission Time Correlation) Java API, designed to allow mission teams to integrate time correlation capabilities into custom applications, process telemetry data programmatically, and generate standard time correlation products for spacecraft operations.",source:"@site/docs/developer/api.md",sourceDirName:"developer",slug:"/developer/api",permalink:"/MMTC-site/docs/developer/api",draft:!1,unlisted:!1,editUrl:"https://github.com/NASA-AMMOS/MMTC/tree/main/docs/developer/api.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"api",title:"MMTC Application Programming Interface (API)",sidebar_label:"API Reference"},sidebar:"mmtcSidebar",previous:{title:"Project Structure",permalink:"/MMTC-site/docs/developer/project-structure"},next:{title:"Testing",permalink:"/MMTC-site/docs/developer/testing"}},s={},m=[{value:"Overview",id:"overview",level:2},{value:"Core Packages",id:"core-packages",level:2},{value:"gov.nasa.jpl.ammos.mmtc.core",id:"govnasajplammosmmtccore",level:3},{value:"gov.nasa.jpl.ammos.mmtc.telemetry",id:"govnasajplammosmmtctelemetry",level:3},{value:"gov.nasa.jpl.ammos.mmtc.filter",id:"govnasajplammosmmtcfilter",level:3},{value:"gov.nasa.jpl.ammos.mmtc.product",id:"govnasajplammosmmtcproduct",level:3},{value:"Key Interfaces",id:"key-interfaces",level:2},{value:"TimeCorrelationManager",id:"timecorrelationmanager",level:3},{value:"TelemetrySource",id:"telemetrysource",level:3},{value:"Filter",id:"filter",level:3},{value:"ProductGenerator",id:"productgenerator",level:3},{value:"Java Plugin Development",id:"java-plugin-development",level:2},{value:"Creating a Custom Telemetry Source",id:"creating-a-custom-telemetry-source",level:3},{value:"Creating a Custom Filter",id:"creating-a-custom-filter",level:3},{value:"Time Conversion Utilities",id:"time-conversion-utilities",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"API Limitations",id:"api-limitations",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"mmtc-api-reference",children:"MMTC API Reference"})}),"\n",(0,r.jsx)(n.p,{children:"This document provides detailed information about the MMTC (Multi-Mission Time Correlation) Java API, designed to allow mission teams to integrate time correlation capabilities into custom applications, process telemetry data programmatically, and generate standard time correlation products for spacecraft operations."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"MMTC provides a Java-based API that enables:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Programmatic extraction of time correlation information from spacecraft telemetry"}),"\n",(0,r.jsx)(n.li,{children:"Conversion between different time systems (SCLK, TDT, UTC)"}),"\n",(0,r.jsx)(n.li,{children:"Generation of time correlation products (SCLK kernels, SCLK/SCET files)"}),"\n",(0,r.jsx)(n.li,{children:"Integration with mission-specific telemetry processing systems"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"core-packages",children:"Core Packages"}),"\n",(0,r.jsx)(n.h3,{id:"govnasajplammosmmtccore",children:"gov.nasa.jpl.ammos.mmtc.core"}),"\n",(0,r.jsx)(n.p,{children:"The core package contains the primary interfaces and classes for time correlation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import gov.nasa.jpl.ammos.mmtc.core.TimeCorrelation;\nimport gov.nasa.jpl.ammos.mmtc.core.TimeCorrelationManager;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"govnasajplammosmmtctelemetry",children:"gov.nasa.jpl.ammos.mmtc.telemetry"}),"\n",(0,r.jsx)(n.p,{children:"Provides interfaces for accessing and processing telemetry:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import gov.nasa.jpl.ammos.mmtc.telemetry.TelemetrySource;\nimport gov.nasa.jpl.ammos.mmtc.telemetry.TelemetrySample;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"govnasajplammosmmtcfilter",children:"gov.nasa.jpl.ammos.mmtc.filter"}),"\n",(0,r.jsx)(n.p,{children:"Contains filter implementations for telemetry quality checking:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import gov.nasa.jpl.ammos.mmtc.filter.Filter;\nimport gov.nasa.jpl.ammos.mmtc.filter.ContactFilter;\nimport gov.nasa.jpl.ammos.mmtc.filter.DataRateFilter;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"govnasajplammosmmtcproduct",children:"gov.nasa.jpl.ammos.mmtc.product"}),"\n",(0,r.jsx)(n.p,{children:"Provides interfaces for generating time correlation products:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import gov.nasa.jpl.ammos.mmtc.product.ProductGenerator;\nimport gov.nasa.jpl.ammos.mmtc.product.SclkKernelGenerator;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"key-interfaces",children:"Key Interfaces"}),"\n",(0,r.jsx)(n.h3,{id:"timecorrelationmanager",children:"TimeCorrelationManager"}),"\n",(0,r.jsx)(n.p,{children:"Central interface for managing the time correlation process:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface TimeCorrelationManager {\n    /**\n     * Performs time correlation using telemetry from the specified time range\n     * @param startTime Start of telemetry query range (TDT)\n     * @param endTime End of telemetry query range (TDT)\n     * @return List of time correlations generated\n     */\n    List<TimeCorrelation> performTimeCorrelation(double startTime, double endTime);\n    \n    /**\n     * Generates standard time correlation products\n     * @param correlations Time correlations to use\n     * @return Map of product types to generated product files\n     */\n    Map<String, File> generateProducts(List<TimeCorrelation> correlations);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"telemetrysource",children:"TelemetrySource"}),"\n",(0,r.jsx)(n.p,{children:"Interface for telemetry data providers:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface TelemetrySource {\n    /**\n     * Retrieves telemetry samples within the specified time range\n     * @param startTime Start of query range (TDT)\n     * @param endTime End of query range (TDT)\n     * @return List of telemetry samples containing time information\n     */\n    List<TelemetrySample> getTelemetrySamples(double startTime, double endTime);\n    \n    /**\n     * Closes resources associated with the telemetry source\n     */\n    void close();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"filter",children:"Filter"}),"\n",(0,r.jsx)(n.p,{children:"Interface for validating telemetry samples:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface Filter {\n    /**\n     * Applies filtering criteria to a telemetry sample\n     * @param sample The telemetry sample to evaluate\n     * @return true if the sample passes the filter, false otherwise\n     */\n    boolean apply(TelemetrySample sample);\n    \n    /**\n     * Gets the name of the filter\n     * @return Filter name\n     */\n    String getName();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"productgenerator",children:"ProductGenerator"}),"\n",(0,r.jsx)(n.p,{children:"Interface for time correlation product generation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface ProductGenerator {\n    /**\n     * Generates a time correlation product\n     * @param correlations Time correlations to use in the product\n     * @param outputPath Path where the product should be written\n     * @return The generated product file\n     */\n    File generateProduct(List<TimeCorrelation> correlations, Path outputPath);\n    \n    /**\n     * Gets the type of product this generator creates\n     * @return Product type identifier\n     */\n    String getProductType();\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"java-plugin-development",children:"Java Plugin Development"}),"\n",(0,r.jsx)(n.h3,{id:"creating-a-custom-telemetry-source",children:"Creating a Custom Telemetry Source"}),"\n",(0,r.jsx)(n.p,{children:"To create a custom telemetry source for your mission's specific telemetry format:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import gov.nasa.jpl.ammos.mmtc.telemetry.TelemetrySource;\nimport gov.nasa.jpl.ammos.mmtc.telemetry.TelemetrySample;\n\npublic class MyMissionTelemetrySource implements TelemetrySource {\n    \n    @Override\n    public List<TelemetrySample> getTelemetrySamples(double startTime, double endTime) {\n        // Implementation specific to your mission's telemetry system\n        List<TelemetrySample> samples = new ArrayList<>();\n        \n        // Connect to your telemetry database or files\n        // Extract SCLK and ERT values\n        // Create TelemetrySample objects\n        \n        return samples;\n    }\n    \n    @Override\n    public void close() {\n        // Clean up resources\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"creating-a-custom-filter",children:"Creating a Custom Filter"}),"\n",(0,r.jsx)(n.p,{children:"To implement a mission-specific filter for telemetry validation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import gov.nasa.jpl.ammos.mmtc.filter.Filter;\nimport gov.nasa.jpl.ammos.mmtc.telemetry.TelemetrySample;\n\npublic class MyMissionSpecificFilter implements Filter {\n    \n    @Override\n    public boolean apply(TelemetrySample sample) {\n        // Custom filtering logic\n        return sample.getQualityIndicator() > 0.95;\n    }\n    \n    @Override\n    public String getName() {\n        return "MyMissionQualityFilter";\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"time-conversion-utilities",children:"Time Conversion Utilities"}),"\n",(0,r.jsx)(n.p,{children:"MMTC provides utilities for converting between different time systems:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import gov.nasa.jpl.ammos.mmtc.util.TimeConverter;\n\n// Convert from SCLK to TDT\ndouble sclkValue = 123456789.0;\ndouble tdtValue = TimeConverter.sclkToTDT(sclkValue, spacecraftId);\n\n// Convert from TDT to UTC\nString utcTime = TimeConverter.tdtToUTC(tdtValue);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"The MMTC API uses an XML-based configuration system:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import gov.nasa.jpl.ammos.mmtc.config.ConfigurationManager;\n\n// Load configuration\nConfigurationManager config = ConfigurationManager.loadFromFile(\n    new File("TimeCorrelationConfigProperties.xml")\n);\n\n// Create a properly configured TimeCorrelationManager\nTimeCorrelationManager manager = TimeCorrelationManagerFactory.create(config);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's a complete example of using the MMTC API to perform time correlation and generate products:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import gov.nasa.jpl.ammos.mmtc.core.TimeCorrelationManager;\nimport gov.nasa.jpl.ammos.mmtc.core.TimeCorrelation;\nimport gov.nasa.jpl.ammos.mmtc.config.ConfigurationManager;\nimport gov.nasa.jpl.ammos.mmtc.util.TimeConverter;\nimport java.io.File;\nimport java.nio.file.Paths;\nimport java.util.List;\nimport java.util.Map;\n\npublic class MMTCExample {\n    public static void main(String[] args) {\n        try {\n            // Load configuration\n            ConfigurationManager config = ConfigurationManager.loadFromFile(\n                new File("TimeCorrelationConfigProperties.xml")\n            );\n            \n            // Create manager\n            TimeCorrelationManager manager = TimeCorrelationManagerFactory.create(config);\n            \n            // Convert time range from UTC to TDT for API call\n            double startTimeTDT = TimeConverter.utcToTDT("2024-07-01T00:00:00Z");\n            double endTimeTDT = TimeConverter.utcToTDT("2024-07-02T00:00:00Z");\n            \n            // Perform time correlation\n            List<TimeCorrelation> correlations = manager.performTimeCorrelation(\n                startTimeTDT, endTimeTDT\n            );\n            \n            System.out.println("Generated " + correlations.size() + " time correlations");\n            \n            // Generate products\n            Map<String, File> products = manager.generateProducts(correlations);\n            \n            // Report on generated products\n            for (Map.Entry<String, File> entry : products.entrySet()) {\n                System.out.println("Generated " + entry.getKey() + ": " + \n                                  entry.getValue().getAbsolutePath());\n            }\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"api-limitations",children:"API Limitations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The MMTC API is designed for Java applications and does not provide REST endpoints"}),"\n",(0,r.jsx)(n.li,{children:"External systems must use Java integration or command-line invocation"}),"\n",(0,r.jsx)(n.li,{children:"CCSDS-compliant telemetry is expected for standard plugins"}),"\n",(0,r.jsx)(n.li,{children:"All time calculations use SPICE libraries and follow NASA/JPL conventions"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/Java/index.html",children:"SPICE API Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.oracle.com/javase/8/docs/technotes/guides/jni/",children:"Java JNI Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://public.ccsds.org/Pubs/301x0b4e1.pdf",children:"CCSDS Time Code Format"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For implementation questions or technical support, contact the MMTC development team at your organization."})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);